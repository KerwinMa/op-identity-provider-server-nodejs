<html>
<head>
    <link rel="stylesheet" href="/style.css" />
    <script type="text/javascript" src="/jquery.min.js"></script>
    <script type="text/javascript" src="//{{=view.hcs.config.logger.host}}/tools/logger/logger.js"></script>
    <script type="text/javascript">
    ((function(window) {


        const INNER_FRAME_PLACEHOLDER_ID = "inner-frame";
        const TOOLS_CONTAINER_ID = "tools";
        const HCS_IDENTITY_DOMAIN = "{{=view.hcs.config.identity.domain}}";
        const LOGGER_HOST = "{{=view.hcs.config.logger.host}}";
        const OAUTH_LOGOUT_URL = "{{=view.hcs.config.identity.oauth.logoutURL}}";


        /**
         * Logger
         */
        
        if (window.__LOGGER) {
            window.__LOGGER.setUrl("//" + LOGGER_HOST + "/tools/logger/record");
            window.__LOGGER.setChannel("identity-outer-js-all");
        }
        function log() {
            if (window.__LOGGER) {
                return window.__LOGGER.log.apply(null, arguments);
            } else {
                return console.log(arguments);
            }
        }


        /**
         * Util
         */

        function generateId() {
            return (Math.floor(Math.random() * 1000000) + 1 + "");
        }

        function generateInnerFrame (url) {
            log('generateInnerFrame(url)', url);
            $("#" + INNER_FRAME_PLACEHOLDER_ID + " > IFRAME").remove();
            initTools();
            $('<iframe src="' + url + '"></iframe>').appendTo("#" + INNER_FRAME_PLACEHOLDER_ID);
        }

        function hideInnerFrame() {
            $("#" + INNER_FRAME_PLACEHOLDER_ID).removeClass("hidden");
            $("#" + INNER_FRAME_PLACEHOLDER_ID).addClass("simulate-hidden");
        }

        function showInnerFrame() {
            $("#" + INNER_FRAME_PLACEHOLDER_ID).removeClass("hidden");
            $("#" + INNER_FRAME_PLACEHOLDER_ID).removeClass("simulate-hidden");
        }

        function sendMessageToInnerFrame (message) {
            log('sendToInnerFrame(message)', message);
            var iframe = $("#" + INNER_FRAME_PLACEHOLDER_ID + " > IFRAME");
            if (iframe.length === 0) {
                throw new Error("Cannot send message to inner frame. No inner frame loaded!");
            }
            var url = iframe.attr("src");
            return iframe[0].contentWindow.postMessage(message, url.replace(/$(https?:\/\/[^\/]+)/, "$1"));
        }

        function callIdentityProvider(request, callback) {
            log("callIdentityProvider(request)", request);
            return $.ajax({
                url : "/api.php",
                type : "POST",
                data : JSON.stringify({
                    "request": request
                }),
                contentType: "application/json",
                // callback handler that will be called on success
                success : function(response, textStatus, jqXHR) {
                    log("callIdentityProvider() - success", response);
                    var result = null;
                    if (typeof response === "string") {
                        try {
                            result = JSON.parse(response).result;
                        } catch (err) {
                            log("callIdentityProvider() - success", response);
                            return callback(new Error("Error '" + err.message + "' parsing JSON response!"));
                        }
                    } else {
                        result = response.result;
                    }            
                    if (result.error) {
                        // result.error.reason.message
                        // result.error.reason.$id
                        log("callIdentityProvider() - error", result.error.reason);
                    }
                    return callback(null, result);
                },
                // callback handler that will be called on error
                error : function(jqXHR, textStatus, errorThrown) {
                    log("callIdentityProvider() - error", textStatus);
                    return callback(new Error("Error '" + textStatus + "' calling identity provider API"));
                }
            });
        }

        function getUrlFor(uri) {
            return window.location.protocol + "//" + window.location.host + uri;
        }

        function addQueryParameters(url, parameters) {
            var m = url.match(/^([^\?]+)(?:\?(.+))?$/);
            if (!m) {
                throw new Error("Error parsing url '" + url + "'");
            }
            console.log("m", m);
            var qs = {};
            if (m[2]) {
                m[2].split("&").forEach(function (pair) {
                    pair = pair.split("=");
                    qs[pair[0]] = pair[1];
                });
            }
            for (var name in parameters) {
                qs[name] = parameters[name];
            }
            return m[1] + "?" + Object.keys(qs).map(function (name) {
                return name + "=" + qs[name];
            }).join("&");
        }


        /**
         * Dev Tools
         */

        var lastToolsData = {};
        var visibleStages = [];

        function initTools() {
            if (!TOOLS_CONTAINER_ID) {
                return TOOLS_CONTAINER_ID;
            }

            log('initTools()');

            function makeIdentityAccess(invalid) {
                var identityCredentials = JSON.parse($("#" + TOOLS_CONTAINER_ID + "-loggedin > [name=\"identity\"]").html());
                var identityAccess = {
                    "accessToken": identityCredentials.accessToken,
                    // TODO: Calculare proof instead of using secret. [Security]
                    "accessSecretProof": identityCredentials.accessSecret,
                    "accessSecretProofExpires": identityCredentials.accessSecretExpires,
                    "uri": identityCredentials.uri,
                    "provider": identityCredentials.provider
                }
                if (invalid) {
                    identityAccess.accessToken += "-invalid";
                }
                return identityAccess;
            }

            visibleStages = [
                "dev",
                "init"
            ];

            var section = null;
            var button = null;

            $("#" + TOOLS_CONTAINER_ID).html("");

            section = $('<div id="' + TOOLS_CONTAINER_ID + '-dev"><h2>Extra for development</h2></div>');
            section.appendTo($("#" + TOOLS_CONTAINER_ID));

                button = $('<button>Identity Provider Login</button>');
                button.click(function() {
                    window.initInnerFrame(getUrlFor("/login"));
                });
                button.appendTo(section);

                button = $('<button>Identity Provider Logout</button>');
                button.click(function() {
                    window.initInnerFrame(getUrlFor("/logout"));
                });
                button.appendTo(section);

                button = $('<button>oAuth Logout</button>');
                button.click(function() {
                    window.initInnerFrame(OAUTH_LOGOUT_URL);
                });
                button.appendTo(section);

            section = $('<div id="' + TOOLS_CONTAINER_ID + '-init"><h2>App API on load</h2></div>');
            section.appendTo($("#" + TOOLS_CONTAINER_ID));

                button = $('<button>Trigger OpenPeer Login</button>');
                button.click(function() {
                    window.initInnerFrame(getUrlFor("/login.php"));
                });
                button.appendTo(section);

                button = $('<button>Lockbox Update (fail)</button>');
                button.click(function() {
                    return sendMessageToInnerFrame({
                        "request": {
                            "$domain": HCS_IDENTITY_DOMAIN,
                            "$appid": "com.hookflash.OpenPeerSampleApp",
                            "$handler": "identity",
                            "$id": generateId(),
                            "$method": "identity-access-lockbox-update",
                            "nonce": "na",
                            "identity": makeIdentityAccess(true),
                            "lockbox": {
                                "domain": "domain.com",
                                "key": "V20x...IbGFWM0J5WTIxWlBRPT0="
                            }
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Rolodex Credentials (fail)</button>');
                button.click(function() {
                    return sendMessageToInnerFrame({
                        "request": {
                            "$domain": HCS_IDENTITY_DOMAIN,
                            "$appid": "com.hookflash.OpenPeerSampleApp",
                            "$handler": "identity",
                            "$id": generateId(),
                            "$method": "identity-access-rolodex-credentials-get",
                            // TODO: Rename to 'nonce'?
                            "clientNonce": "na",
                            "identity": makeIdentityAccess(true)
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Validate Access (fail)</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessValidateRequest
                    return callIdentityProvider({
                        "$domain": HCS_IDENTITY_DOMAIN,
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity",
                        "$id": generateId(),
                        "$method": "identity-access-validate",
                        "nonce": "na",
                        "purpose": "whatever",
                        "identity": makeIdentityAccess(true)
                    }, function (err, result) {
                        var stage = (visibleStages.indexOf("loggedin") !== -1) ? "loggedin" : "init";
                        if (result.error) {
                            return showTools(stage, {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools(stage, {
                                result: "{}"
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Update Lookup (fail)</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityLookupUpdateRequest
                    return callIdentityProvider({
                        "$domain": HCS_IDENTITY_DOMAIN,
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity",
                        "$id": generateId(),
                        "$method": "identity-lookup-update",
                        "nonce": "na",
                        "lockbox": {
                            "$id": generateId(),
                            "domain": HCS_IDENTITY_DOMAIN,
                            "accessToken": generateId(),
                            "accessSecretProof": generateId(),
                            "accessSecretProofExpires": Date.now() + 60 * 60 * 24 * 1000
                        },
                        "identity": makeIdentityAccess(true)
                    }, function (err, result) {
                        var stage = (visibleStages.indexOf("loggedin") !== -1) ? "loggedin" : "init";
                        if (result.error) {
                            return showTools(stage, {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools(stage, {
                                result: "{}"
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<pre name="result"></pre>');
                button.appendTo(section);

            section = $('<div id="' + TOOLS_CONTAINER_ID + '-ready" class="hidden"><h2>App API after login ready</h2></div>');
            section.appendTo($("#" + TOOLS_CONTAINER_ID));

                button = $('<button>Access Start</button>');
                button.click(function() {

                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessStartNotification
                    return sendMessageToInnerFrame({
                        "notify": {
                            "$domain": HCS_IDENTITY_DOMAIN,
                            "$appid": "com.hookflash.OpenPeerSampleApp",
                            "$handler": "identity",
                            "$id": generateId(),
                            "$method": "identity-access-start",
                            "agent": {
                                "userAgent": "OpenPeerSampleApp/1.0 (iPhone OS 6.1.2;iPad) HOPID/1.0 (777)",
                                "name": "OpenPeerSampleApp",
                                "image": "http://hookflash.com/wp-content/themes/CleanSpace/images/logo.png",
                                "url": "www.openpeer.org"
                            },
                            "identity": {
                                "base": "identity://" + HCS_IDENTITY_DOMAIN + "/",
                                "provider": HCS_IDENTITY_DOMAIN
                            },
                            "browser": {
                                "visibility": "visible-on-demand",
                                "popup": "deny",
                                "outerFrameURL": addQueryParameters(window.location.href, {
                                    trigger: "login"
                                })
                            }
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Access Reset</button>');
                button.click(function() {

                    // TODO: Document API call.
                    return sendMessageToInnerFrame({
                        "notify": {
                            "$domain": HCS_IDENTITY_DOMAIN,
                            "$appid": "com.hookflash.OpenPeerSampleApp",
                            "$handler": "identity",
                            "$id": generateId(),
                            "$method": "identity-access-reset",
                            "browser": {
                                "outerFrameURL": addQueryParameters(window.location.href, {
                                    trigger: "login"
                                })
                            }
                        }
                    });
                });
                button.appendTo(section);

            section = $('<div id="' + TOOLS_CONTAINER_ID + '-loggedin" class="hidden"><h2>App API after login complete</h2></div>');
            section.appendTo($("#" + TOOLS_CONTAINER_ID));

                button = $('<pre name="identity"></pre>');
                button.appendTo(section);

                button = $('<button>Lockbox Update</button>');
                button.click(function() {
                    return sendMessageToInnerFrame({
                        "request": {
                            "$domain": HCS_IDENTITY_DOMAIN,
                            "$appid": "com.hookflash.OpenPeerSampleApp",
                            "$handler": "identity",
                            "$id": generateId(),
                            "$method": "identity-access-lockbox-update",
                            "nonce": "na",
                            "identity": makeIdentityAccess(),
                            "lockbox": {
                                "domain": "domain.com",
                                "key": "V20x...IbGFWM0J5WTIxWlBRPT0="
                            }
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Rolodex Credentials</button>');
                button.click(function() {
                    return sendMessageToInnerFrame({
                        "request": {
                            "$domain": HCS_IDENTITY_DOMAIN,
                            "$appid": "com.hookflash.OpenPeerSampleApp",
                            "$handler": "identity",
                            "$id": generateId(),
                            "$method": "identity-access-rolodex-credentials-get",
                            // TODO: Rename to 'nonce'?
                            "clientNonce": "na",
                            "identity": makeIdentityAccess()
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Validate Access</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessValidateRequest
                    return callIdentityProvider({
                        "$domain": HCS_IDENTITY_DOMAIN,
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity",
                        "$id": generateId(),
                        "$method": "identity-access-validate",
                        "nonce": "na",
                        "purpose": "whatever",
                        "identity": makeIdentityAccess()
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("loggedin", {
                                result: "{}"
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Update Lookup (create)</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityLookupUpdateRequest
                    var identity = makeIdentityAccess();
                    var identityExtra = {
                        "stableID": "0acc990c7b6e7d5cb9a3183d432e37776fb182bf",
                        "peer": {},
                        "priority": 5,
                        "weight": 1,
                        "contactProofBundle": {
                            "contactProof": {
                                "$id": "2d950c960b52c32a4766a148e8a39d0527110fee",
                                "stableID": "0acc990c7b6e7d5cb9a3183d432e37776fb182bf",
                                "contact": "peer://example.com/ab43bd44390dabc329192a392bef1",
                                "uri": "identity://domain.com/alice",
                                "created": 54593943,
                                "expires": 65439343
                            },
                            "signature": {
                                "reference": "#2d950c960b52c32a4766a148e8a39d0527110fee",
                                "algorithm": "http://meta.openpeer.org/2012/12/14/jsonsig#rsa-sha1",
                                "digestValue": "Wm1Sa...lptUT0=",
                                "digestSigned": "ZmRh...2FzZmQ=",
                                "key": { "uri": "peer://example.com/ab43bd44390dabc329192a392bef1" }
                            }
                        }
                    };
                    for (var name in identityExtra) {
                        identity[name] = identityExtra[name];
                    }
                    return callIdentityProvider({
                        "$domain": HCS_IDENTITY_DOMAIN,
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity",
                        "$id": generateId(),
                        "$method": "identity-lookup-update",
                        "nonce": "na",
                        "lockbox": {
                            "$id": generateId(),
                            "domain": HCS_IDENTITY_DOMAIN,
                            "accessToken": generateId(),
                            "accessSecretProof": generateId(),
                            "accessSecretProofExpires": Date.now() + 60 * 60 * 24 * 1000
                        },
                        "identity": identity
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("loggedin", {
                                result: "{}"
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Update Lookup (remove)</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityLookupUpdateRequest
                    return callIdentityProvider({
                        "$domain": HCS_IDENTITY_DOMAIN,
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity",
                        "$id": generateId(),
                        "$method": "identity-lookup-update",
                        "nonce": "na",
                        "identity": makeIdentityAccess()
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("loggedin", {
                                result: "{}"
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Check Lookup</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityLookupServiceRequests-IdentityLookupCheckRequest
                    var identity = makeIdentityAccess();
                    var m = identity.uri.match(/^(.+?)\/([^\/]+)$/);
                    return callIdentityProvider({
                        "$domain": HCS_IDENTITY_DOMAIN,
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity-lookup",
                        "$id": generateId(),
                        "$method": "identity-lookup-check",
                        "providers": {
                            "provider": [
                                {
                                    "base": m[1],
                                    "separator": ",",
                                    "identities": m[2]
                                }
                            ]
                        }
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.identities, null, 4)
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Lookup</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityLookupServiceRequests-IdentityLookupRequest
                    var identity = makeIdentityAccess();
                    var m = identity.uri.match(/^(.+?)\/([^\/]+)$/);
                    return callIdentityProvider({
                        "$domain": HCS_IDENTITY_DOMAIN,
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity-lookup",
                        "$id": generateId(),
                        "$method": "identity-lookup",
                        "providers": {
                            "provider": [
                                {
                                    "base": m[1],
                                    "separator": ",",
                                    "identities": m[2]
                                }
                            ]
                        }
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.identities, null, 4)
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<pre name="result"></pre>');
                button.appendTo(section);
        }

        var resultTimeouts = {};
        function showTools (stage, data) {
            $("#" + TOOLS_CONTAINER_ID + "-" + stage).removeClass("hidden");
            if (!lastToolsData[stage]) {
                lastToolsData[stage] = {};
            }
            if (visibleStages.indexOf(stage) === -1) {
                visibleStages.push(stage);
            }
            if (data) {
                for (var name in data) {
                    lastToolsData[stage][name] = data[name];
                }
            }
            for (var name in lastToolsData[stage]) {
                $("#" + TOOLS_CONTAINER_ID + "-" + stage + " > [name=\"" + name + "\"]").html(lastToolsData[stage][name]);
                if (name === "result") {
                    if (resultTimeouts[stage]) {
                        clearTimeout(resultTimeouts[stage]);
                    }
                    resultTimeouts[stage] = setTimeout(function() {
                        $("#" + TOOLS_CONTAINER_ID + "-" + stage + " > [name=\"" + name + "\"]").html("");
                    }, 3 * 1000);
                }
            }
        }


        /**
         * App API - These methods get called by the application hosting this web view.
         */

        window.initInnerFrame = function (identityLoginURL) {

            log('window.initInnerFrame(identityLoginURL)', identityLoginURL);

            generateInnerFrame(identityLoginURL);

            return true;
        }


        /**
         * Inner Frame API - These methods get called by the page loaded in the inner frame.
         */
        window.addEventListener("message", function (event) {
            try {
                var message = JSON.parse(event.data);
                log('window.addEventListener("message")', message);

                if (message.request) {
                    if (message.request.$handler === "identity") {

                        // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessWindowRequest
                        if (message.request.$method === "identity-access-window") {
                            showTools("ready");
                            if (message.request.browser.visibility) {
                                showInnerFrame();
                            } else {
                                hideInnerFrame();
                            }
                            return sendMessageToInnerFrame({
                                "result": {
                                    "$domain": message.request.$domain,
                                    "$appid": message.request.$appid,
                                    "$id": message.request.$id,
                                    "$handler": "identity",
                                    "$method": "identity-access-window",
                                    "$timestamp": Date.now()/1000
                                }
                            });
                        }
                    }
                } else
                if (message.notify) {
                    if (message.notify.$handler === "identity") {
                        // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessCompleteNotification
                        if (message.notify.$method === "identity-access-complete") {
                            return showTools("loggedin", {
                                identity: JSON.stringify(message.notify.identity, null, 4)
                            });
                        }
                    }
                } else
                if (message.result) {
                    if (message.result.$handler === "identity") {
                        // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessLockboxUpdateRequest
                        if (message.result.$method === "identity-access-lockbox-update") {
                            var stage = (visibleStages.indexOf("loggedin") !== -1) ? "loggedin" : "init";
                            if (message.result.error) {
                                return showTools(stage, {
                                    result: JSON.stringify(message.result.error, null, 4)
                                });
                            } else {
                                return showTools(stage, {
                                    result: "{}"
                                });
                            }
                        } else
                        // @see http://docs.openpeer.org/OpenPeerProtocolSpecificationAnnexRolodex/#IdentityServiceRequestsAnnex-IdentityAccessRolodexCredentialsGetRequest
                        if (message.result.$method === "identity-access-rolodex-credentials-get") {
                            var stage = (visibleStages.indexOf("loggedin") !== -1) ? "loggedin" : "init";
                            if (message.result.error) {
                                return showTools(stage, {
                                    result: JSON.stringify(message.result.error, null, 4)
                                });
                            } else {
                                return showTools(stage, {
                                    result: JSON.stringify(message.result.rolodex, null, 4)
                                });
                            }
                        }
                    }
                }

            } catch (err) {
                log("ERROR", 'window.addEventListener("message")', err.stack);
                console.error("ERROR", 'window.addEventListener("message")', err.stack);
            }
        }, false);


        /**
         * Init
         */

        window.init = function () {
            log('init()');

            initTools();

            if (/trigger=login/.test(window.location.search)) {
                window.initInnerFrame(getUrlFor("/login.php"));
            }
        }


    })(window));
    </script>
</head>
<body onload="init();">
    <h1>Identity Provider &amp; Contacts Integration Tests</h1>
    <div id="tools"></div>
    <div id="inner-frame" class="hidden"></div>
</body>
</html>