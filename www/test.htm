<html>
<head>
    <link rel="stylesheet" href="/style.css" />
    <script type="text/javascript" src="/jquery.min.js"></script>
    <script type="text/javascript" src="/jquery.cookie.js"></script>
    <script type="text/javascript" src="//{{=view.hcs.config.logger.host}}/tools/logger/logger.js"></script>
    <script type="text/javascript">
    ((function(window) {

        const INNER_FRAME_PLACEHOLDER_ID = "inner-frame";
        const TOOLS_CONTAINER_ID = "tools";
        const LOGGER_HOST = "{{=view.hcs.config.logger.host}}";
        // TODO: Get this URL from config.
        const OAUTH_LOGOUT_URL = "{{=view.hcs.config.identity.oauth.logoutURL}}";
//        const HCS_PROVIDER_DOMAIN = "{{=view.hcs.config.identity.oauth.authorizationURL}}".replace(/^https?:\/\/([^:\/]+)(?::\d+)?\/.+$/, "$1");


        function initConfig() {
            var identityDomain = null;

            // If the identityDomain is set in the query string we take it over the cookie.
            var identityDomainMatch = (window.location.search && window.location.search.match(/identityDomain=([^\&]+)(\&|$)/)) || null;
            if (identityDomainMatch) {
                identityDomain = identityDomainMatch[1];
            } else {
                identityDomain = $.cookie('test-config-identity-domain');
            }

            if (identityDomain) {
                $("#config-identity-domain").val(identityDomain);
            }
            $("#config-identity-domain").on("change keyup paste", function () {
                getIdentityDomain();
            });
        }

        function getIdentityDomain () {
            var identityDomain = $("#config-identity-domain").val();
            if (!identityDomain) {
                alert("Identity Domain must be set!");
            }
            $.cookie('test-config-identity-domain', identityDomain);
            return identityDomain;
        }


        /**
         * Logger
         */
        
        if (window.__LOGGER) {
            window.__LOGGER.setUrl("//" + LOGGER_HOST + "/tools/logger/record");
            window.__LOGGER.setChannel("identity-outer-js-all");
        }
        function log() {
            if (window.__LOGGER) {
                return window.__LOGGER.log.apply(null, arguments);
            } else {
                return console.log(arguments);
            }
        }


        /**
         * Util
         */

        function generateId() {
            return (Math.floor(Math.random() * 1000000) + 1 + "");
        }

        function generateInnerFrame (url) {
            log('generateInnerFrame(url)', url);
            $("#" + INNER_FRAME_PLACEHOLDER_ID + " > DIV > IFRAME").remove();
            initTools();
            $('<iframe src="' + url + '"></iframe>').appendTo("#" + INNER_FRAME_PLACEHOLDER_ID + " > DIV");
        }

        function hideInnerFrame() {
            $("#" + INNER_FRAME_PLACEHOLDER_ID).removeClass("hidden");
            $("#" + INNER_FRAME_PLACEHOLDER_ID).addClass("simulate-hidden");
        }

        function showInnerFrame() {
            $("#" + INNER_FRAME_PLACEHOLDER_ID).removeClass("hidden");
            $("#" + INNER_FRAME_PLACEHOLDER_ID).removeClass("simulate-hidden");
        }

        function isIframeLoaded() {
            return ($("#" + INNER_FRAME_PLACEHOLDER_ID + " > DIV > IFRAME").length === 1);
        }

        function reloadInnerFrame() {
            log('reloadInnerFrame() - window.initInnerFrame.identityLoginURL', window.initInnerFrame.identityLoginURL);
            if (!window.initInnerFrame.identityLoginURL) {
                throw new Error("`window.initInnerFrame.identityLoginURL` not set!");
            }
            var url = addQueryParameters(window.initInnerFrame.identityLoginURL, {
                "reload": "true",
                "t": Date.now()
            });
            initTools();
            log('reloadInnerFrame() - url', url);
            $("#" + INNER_FRAME_PLACEHOLDER_ID + " > DIV > IFRAME").attr("src", url);
        }

        function sendMessageToInnerFrame (message) {
            if (loginWindow) {
                log('sendToInnerFrame(message) - loginwindow', message);
                return loginWindow.postMessage(message, "*");
            } else {
                log('sendToInnerFrame(message) - iframe', message);
                var iframe = $("#" + INNER_FRAME_PLACEHOLDER_ID + " > DIV > IFRAME");
                if (iframe.length === 0) {
                    throw new Error("Cannot send message to inner frame. No inner frame loaded!");
                }
                var url = iframe.attr("src");
                return iframe[0].contentWindow.postMessage(message, url.replace(/$(https?:\/\/[^\/]+)/, "$1"));
            }
        }

        function callServer (url, request, callback) {
            log("callServer(request)", request);
            return $.ajax({
                url : url,
                type : "POST",
                data : JSON.stringify({
                    "request": request
                }),
                contentType: "application/json",
                // callback handler that will be called on success
                success : function(response, textStatus, jqXHR) {
                    log("callServer() - success", response);
                    var result = null;
                    if (typeof response === "string") {
                        try {
                            result = JSON.parse(response).result;
                        } catch (err) {
                            log("callServer() - success", response);
                            return callback(new Error("Error '" + err.message + "' parsing JSON response!"));
                        }
                    } else {
                        result = response.result;
                    }            
                    if (result.error) {
                        // result.error.reason.message
                        // result.error.reason.$id
                        log("callServer() - error", result.error.reason);
                    }
                    return callback(null, result);
                },
                // callback handler that will be called on error
                error : function(jqXHR, textStatus, errorThrown) {
                    log("callServer() - error", textStatus);
                    return callback(new Error("Error '" + textStatus + "' calling '" + url + "'"));
                }
            });
        }

        function callIdentityProvider (request, callback) {
            return callServer("/api.php", request, callback);
        }

        function callRolodex (request, callback) {
            return callServer("//" + window.location.hostname + ":5004/api", request, callback);
        }

        function getUrlFor(uri) {
            return window.location.protocol + "//" + window.location.host + uri;
        }

        function addQueryParameters(url, parameters) {
            var m = url.match(/^([^\?]+)(?:\?(.+))?$/);
            if (!m) {
                throw new Error("Error parsing url '" + url + "'");
            }
            var qs = {};
            if (m[2]) {
                m[2].split("&").forEach(function (pair) {
                    pair = pair.split("=");
                    qs[pair[0]] = pair[1];
                });
            }
            for (var name in parameters) {
                qs[name] = parameters[name];
            }
            return m[1] + "?" + Object.keys(qs).map(function (name) {
                return name + "=" + qs[name];
            }).join("&");
        }


        /**
         * Dev Tools
         */

        var lastToolsData = {};
        var visibleStages = [];

        function initTools() {
            if (!TOOLS_CONTAINER_ID) {
                return TOOLS_CONTAINER_ID;
            }

            log('initTools()');

            function makeIdentityAccess (invalid) {
                var identityCredentials = JSON.parse($("#" + TOOLS_CONTAINER_ID + "-loggedin > [name=\"identity\"]").html());
                var identityAccess = {
                    "accessToken": identityCredentials.accessToken,
                    // TODO: Calculare proof instead of using secret. [Security]
                    "accessSecretProof": identityCredentials.accessSecret,
                    "accessSecretProofExpires": identityCredentials.accessSecretExpires,
                    "uri": identityCredentials.uri,
                    "provider": identityCredentials.provider
                }
                if (invalid) {
                    identityAccess.accessToken += "-invalid";
                }
                return identityAccess;
            }

            function makeRolodexAccess (invalid) {
                var rolodexCredentials = JSON.parse($("#" + TOOLS_CONTAINER_ID + "-rolodex > [name=\"rolodex-access\"]").html()).rolodex;
                var rolodexAccess = {
                    "accessToken": rolodexCredentials.accessToken,
                    // TODO: Calculare proof instead of using secret. [Security]
                    "accessSecretProof": rolodexCredentials.accessSecret,
                    "accessSecretProofExpires": rolodexCredentials.accessSecretExpires,
                }
                if (invalid) {
                    rolodexAccess.accessToken += "-invalid";
                }
                return rolodexAccess;
            }

            visibleStages = [
                "dev",
                "init"
            ];

            var section = null;
            var button = null;

            $("#" + TOOLS_CONTAINER_ID).html("");
            $("#" + INNER_FRAME_PLACEHOLDER_ID + " > DIV").removeClass("short");

            section = $('<div id="' + TOOLS_CONTAINER_ID + '-dev"><h2>Extra for development</h2></div>');
            section.appendTo($("#" + TOOLS_CONTAINER_ID));

                button = $('<button>Identity Provider Login</button>');
                button.click(function() {
                    window.initInnerFrame(getUrlFor("/login"));
                });
                button.appendTo(section);

                button = $('<button>Identity Provider Logout</button>');
                button.click(function() {
                    window.initInnerFrame(getUrlFor("/logout"));
                });
                button.appendTo(section);

                button = $('<button>oAuth Logout</button>');
                button.click(function() {
                    window.initInnerFrame(OAUTH_LOGOUT_URL);
                });
                button.appendTo(section);

            section = $('<div id="' + TOOLS_CONTAINER_ID + '-init"><h2>App API on load</h2></div>');
            section.appendTo($("#" + TOOLS_CONTAINER_ID));

                button = $('<button>Trigger OpenPeer Login</button>');
                button.click(function() {
                    window.initInnerFrame(getUrlFor("/login.html"));
                });
                button.appendTo(section);

                button = $('<button>Lockbox Update (fail)</button>');
                button.click(function() {
                    return sendMessageToInnerFrame({
                        "request": {
                            "$domain": getIdentityDomain(),
                            "$appid": "com.hookflash.OpenPeerSampleApp",
                            "$handler": "identity",
                            "$id": generateId(),
                            "$method": "identity-access-lockbox-update",
                            "nonce": "na",
                            "identity": makeIdentityAccess(true),
                            "lockbox": {
                                "domain": "domain.com",
                                "key": "V20x...IbGFWM0J5WTIxWlBRPT0="
                            }
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Rolodex Credentials (fail)</button>');
                button.click(function() {
                    return sendMessageToInnerFrame({
                        "request": {
                            "$domain": getIdentityDomain(),
                            "$appid": "com.hookflash.OpenPeerSampleApp",
                            "$handler": "identity",
                            "$id": generateId(),
                            "$method": "identity-access-rolodex-credentials-get",
                            // TODO: Rename to 'nonce'?
                            "clientNonce": "na",
                            "identity": makeIdentityAccess(true)
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Validate Access (fail)</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessValidateRequest
                    return callIdentityProvider({
                        "$domain": getIdentityDomain(),
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity",
                        "$id": generateId(),
                        "$method": "identity-access-validate",
                        "nonce": "na",
                        "purpose": "whatever",
                        "identity": makeIdentityAccess(true)
                    }, function (err, result) {
                        var stage = (visibleStages.indexOf("loggedin") !== -1) ? "loggedin" : "init";
                        if (result.error) {
                            return showTools(stage, {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools(stage, {
                                result: "{}"
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Update Lookup (fail)</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityLookupUpdateRequest
                    return callIdentityProvider({
                        "$domain": getIdentityDomain(),
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity",
                        "$id": generateId(),
                        "$method": "identity-lookup-update",
                        "nonce": "na",
                        "lockbox": {
                            "$id": generateId(),
//                            "domain": HCS_PROVIDER_DOMAIN,
                            "domain": getIdentityDomain,
                            "accessToken": generateId(),
                            "accessSecretProof": generateId(),
                            "accessSecretProofExpires": Date.now() + 60 * 60 * 24 * 1000
                        },
                        "identity": makeIdentityAccess(true)
                    }, function (err, result) {
                        var stage = (visibleStages.indexOf("loggedin") !== -1) ? "loggedin" : "init";
                        if (result.error) {
                            return showTools(stage, {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools(stage, {
                                result: "{}"
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<pre name="result"></pre>');
                button.appendTo(section);

            section = $('<div id="' + TOOLS_CONTAINER_ID + '-ready" class="hidden"><h2>App API after login ready</h2></div>');
            section.appendTo($("#" + TOOLS_CONTAINER_ID));

                button = $('<button>Access Start</button>');
                button.click(function() {

                    showTools(null, null, {
                        disable: [
                            {
                                stage: "ready"
                            }
                        ]
                    });

                    var notify = {
                        "$domain": getIdentityDomain(),
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity",
                        "$id": generateId(),
                        "$method": "identity-access-start",
                        "agent": {
                            "userAgent": "OpenPeerSampleApp/1.0 (iPhone OS 6.1.2;iPad) HOPID/1.0 (777)",
                            "name": "OpenPeerSampleApp",
                            "image": "http://hookflash.com/wp-content/themes/CleanSpace/images/logo.png",
                            "url": "www.openpeer.org"
                        },
                        "identity": {
                            // NOTE: We omit the base uri to allow the user to choose the login method
                            //       from the ones available by the identity provider service.
                            //       If we specify a base the identity provider should proceed with the login immediately.
                            //"base": "identity://" + getIdentityDomain() + "/",
                            "provider": getIdentityDomain()
                        },
                        "browser": {
                            "visibility": "visible-on-demand",
                            "popup": "deny",
                            "outerFrameURL": addQueryParameters(window.location.href, {
                                trigger: "login"
                            })
                        }
                    };

                    var relogin = $("#" + TOOLS_CONTAINER_ID + "-ready > [name=\"relogin\"]").html();
                    if (relogin && (relogin = JSON.parse(relogin)) && relogin.reloginKey) {
                        notify.identity.reloginKey = relogin.reloginKey;
                    }

                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessStartNotification
                    return sendMessageToInnerFrame({
                        "notify": notify
                    });
                });
                button.appendTo(section);

                button = $('<button id="button-identity-access-reset">Access Reset</button>');
                button.click(function() {

                    showTools(null, null, {
                        disable: [
                            {
                                stage: "ready"
                            }
                        ]
                    });

                    // TODO: Document API call.
                    return sendMessageToInnerFrame({
                        "notify": {
                            "$domain": getIdentityDomain(),
                            "$appid": "com.hookflash.OpenPeerSampleApp",
                            "$handler": "identity",
                            "$id": generateId(),
                            "$method": "identity-access-reset",
                            "browser": {
                                "outerFrameURL": addQueryParameters(window.location.href, {
                                    trigger: "login"
                                })
                            }
                        }
                    });
                });
                button.appendTo(section);

                button = $('<pre name="relogin"></pre>');
                button.appendTo(section);

            section = $('<div id="' + TOOLS_CONTAINER_ID + '-loggedin" class="hidden"><h2>App API after login complete</h2></div>');
            section.appendTo($("#" + TOOLS_CONTAINER_ID));

                button = $('<pre name="identity"></pre>');
                button.appendTo(section);

                button = $('<button>Lockbox Update</button>');
                button.click(function() {
                    return sendMessageToInnerFrame({
                        "request": {
                            "$domain": getIdentityDomain(),
                            "$appid": "com.hookflash.OpenPeerSampleApp",
                            "$handler": "identity",
                            "$id": generateId(),
                            "$method": "identity-access-lockbox-update",
                            "nonce": "na",
                            "identity": makeIdentityAccess(),
                            "lockbox": {
                                "domain": "domain.com",
                                "key": "V20x...IbGFWM0J5WTIxWlBRPT0="
                            }
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Rolodex Credentials</button>');
                button.click(function() {
                    return sendMessageToInnerFrame({
                        "request": {
                            "$domain": getIdentityDomain(),
                            "$appid": "com.hookflash.OpenPeerSampleApp",
                            "$handler": "identity",
                            "$id": generateId(),
                            "$method": "identity-access-rolodex-credentials-get",
                            // TODO: Rename to 'nonce'?
                            "clientNonce": "na",
                            "identity": makeIdentityAccess()
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Validate Access</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessValidateRequest
                    return callIdentityProvider({
                        "$domain": getIdentityDomain(),
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity",
                        "$id": generateId(),
                        "$method": "identity-access-validate",
                        "nonce": "na",
                        "purpose": "whatever",
                        "identity": makeIdentityAccess()
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("loggedin", {
                                result: "{}"
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Update Lookup (create)</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityLookupUpdateRequest
                    var identity = makeIdentityAccess();
                    var identityExtra = {
                        "stableID": "0acc990c7b6e7d5cb9a3183d432e37776fb182bf",
                        "peer": {},
                        "priority": 5,
                        "weight": 1,
                        "contactProofBundle": {
                            "contactProof": {
                                "$id": "2d950c960b52c32a4766a148e8a39d0527110fee",
                                "stableID": "0acc990c7b6e7d5cb9a3183d432e37776fb182bf",
                                "contact": "peer://example.com/ab43bd44390dabc329192a392bef1",
                                "uri": "identity://domain.com/alice",
                                "created": 54593943,
                                "expires": 65439343
                            },
                            "signature": {
                                "reference": "#2d950c960b52c32a4766a148e8a39d0527110fee",
                                "algorithm": "http://meta.openpeer.org/2012/12/14/jsonsig#rsa-sha1",
                                "digestValue": "Wm1Sa...lptUT0=",
                                "digestSigned": "ZmRh...2FzZmQ=",
                                "key": { "uri": "peer://example.com/ab43bd44390dabc329192a392bef1" }
                            }
                        }
                    };
                    for (var name in identityExtra) {
                        identity[name] = identityExtra[name];
                    }
                    return callIdentityProvider({
                        "$domain": getIdentityDomain(),
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity",
                        "$id": generateId(),
                        "$method": "identity-lookup-update",
                        "nonce": "na",
                        "lockbox": {
                            "$id": generateId(),
                            "domain": getIdentityDomain(),
                            "accessToken": generateId(),
                            "accessSecretProof": generateId(),
                            "accessSecretProofExpires": Date.now() + 60 * 60 * 24 * 1000
                        },
                        "identity": identity
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("loggedin", {
                                result: "{}"
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Update Lookup (remove)</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityLookupUpdateRequest
                    return callIdentityProvider({
                        "$domain": getIdentityDomain(),
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity",
                        "$id": generateId(),
                        "$method": "identity-lookup-update",
                        "nonce": "na",
                        "identity": makeIdentityAccess()
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("loggedin", {
                                result: "{}"
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Check Lookup</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityLookupServiceRequests-IdentityLookupCheckRequest
                    var identity = makeIdentityAccess();
                    var m = identity.uri.match(/^(.+?)\/([^\/]+)$/);
                    return callIdentityProvider({
                        "$domain": getIdentityDomain(),
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity-lookup",
                        "$id": generateId(),
                        "$method": "identity-lookup-check",
                        "providers": {
                            "provider": [
                                {
                                    "base": m[1],
                                    "separator": ",",
                                    "identities": m[2]
                                }
                            ]
                        }
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.identities, null, 4)
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Lookup</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityLookupServiceRequests-IdentityLookupRequest
                    var identity = makeIdentityAccess();
                    var m = identity.uri.match(/^(.+?)\/([^\/]+)$/);
                    return callIdentityProvider({
                        "$domain": getIdentityDomain(),
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "identity-lookup",
                        "$id": generateId(),
                        "$method": "identity-lookup",
                        "providers": {
                            "provider": [
                                {
                                    "base": m[1],
                                    "separator": ",",
                                    "identities": m[2]
                                }
                            ]
                        }
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("loggedin", {
                                result: JSON.stringify(result.identities, null, 4)
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<pre name="result"></pre>');
                button.appendTo(section);

            section = $('<div id="' + TOOLS_CONTAINER_ID + '-rolodex-init" class="hidden"><h2>App API after Rolodex Credentials Get</h2></div>');
            section.appendTo($("#" + TOOLS_CONTAINER_ID));

                button = $('<pre name="rolodex-token"></pre>');
                button.appendTo(section);

                button = $('<button>Rolodex Access</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecificationAnnexRolodex/#RolodexServiceRequests-RolodexAccessRequest
                    var rolodexCredentials = JSON.parse($("#" + TOOLS_CONTAINER_ID + "-rolodex-init > [name=\"rolodex-token\"]").html());
                    return callRolodex({
                        "$domain": getIdentityDomain(),
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "rolodex",
                        "$id": generateId(),
                        "$method": "rolodex-access",
                        "clientNonce": "na",
                        "identity": makeIdentityAccess(),
                        "rolodex": rolodexCredentials,
                        "agent": {
                            "userAgent": "hookflash/1.0.1001a (iOS/iPad)",
                            "name": "hookflash",
                            "image": "https://hookflash.com/brandsquare.png",
                            "url": "https://hookflash.com/agentinfo/"
                        },
                        "grant": {
                            "$id": "de0c8c10d692bc91c1a551f57a50d2f97ef67543"
                        }
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("rolodex-init", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("rolodex", {
                                "rolodex-access": JSON.stringify({
                                    rolodex: result.rolodex,
                                    namespaceGrantChallenge: result.namespaceGrantChallenge || null
                                }, null, 4)
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<pre name="result"></pre>');
                button.appendTo(section);

            section = $('<div id="' + TOOLS_CONTAINER_ID + '-rolodex" class="hidden"><h2>App API after Rolodex Access</h2></div>');
            section.appendTo($("#" + TOOLS_CONTAINER_ID));

                button = $('<pre name="rolodex-access"></pre>');
                button.appendTo(section);

                button = $('<button>Grant Challenge</button>');
                button.click(function() {
console.log("TODO: Implement!");
                });
                button.appendTo(section);

                button = $('<button>Contacts Get</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecificationAnnexRolodex/#RolodexServiceRequests-RolodexContactsGetRequest
                    var rolodex = makeRolodexAccess();
                    rolodex.version = "";
                    rolodex.refresh = false;
                    return callRolodex({
                        "$domain": getIdentityDomain(),
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "rolodex",
                        "$id": generateId(),
                        "$method": "rolodex-contacts-get",
                        "clientNonce": "na",
                        "rolodex": rolodex
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("rolodex", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("rolodex", {
                                result: JSON.stringify({
                                    rolodex: result.rolodex,
                                    identities: result.identities || null
                                }, null, 4)
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<button>Contacts Get (refresh)</button>');
                button.click(function() {
                    // @see http://docs.openpeer.org/OpenPeerProtocolSpecificationAnnexRolodex/#RolodexServiceRequests-RolodexContactsGetRequest
                    var rolodex = makeRolodexAccess();
                    rolodex.version = "";
                    rolodex.refresh = true;
                    return callRolodex({
                        "$domain": getIdentityDomain(),
                        "$appid": "com.hookflash.OpenPeerSampleApp",
                        "$handler": "rolodex",
                        "$id": generateId(),
                        "$method": "rolodex-contacts-get",
                        "clientNonce": "na",
                        "rolodex": rolodex
                    }, function (err, result) {
                        if (result.error) {
                            return showTools("rolodex", {
                                result: JSON.stringify(result.error, null, 4)
                            });
                        } else {
                            return showTools("rolodex", {
                                result: JSON.stringify({
                                    rolodex: result.rolodex,
                                    identities: result.identities || null
                                }, null, 4)
                            });
                        }
                    });
                });
                button.appendTo(section);

                button = $('<pre name="result"></pre>');
                button.appendTo(section);

        }

        var resultTimeouts = {};
        function showTools (stage, data, options) {
            options = options || {};
            [
                "disable",
                "enable"
            ].forEach(function (type) {
                if (!options[type]) return;
                options[type].forEach(function (opts) {
                    if (opts.stage) {
                        var selector = "#" + TOOLS_CONTAINER_ID + "-" + opts.stage + " BUTTON";
                        if (opts.button) {
                            selector += "#button-" + opts.button;
                        }
                        $(selector).prop("disabled", (type === "disable"));
                    }
                });
            });
            if (!stage) return;
            $("#" + TOOLS_CONTAINER_ID + "-" + stage).removeClass("hidden");
            if (!lastToolsData[stage]) {
                lastToolsData[stage] = {};
            }
            if (visibleStages.indexOf(stage) === -1) {
                visibleStages.push(stage);
            }
            if (data) {
                for (var name in data) {
                    lastToolsData[stage][name] = data[name];
                }
            }
            for (var name in lastToolsData[stage]) {
                $("#" + TOOLS_CONTAINER_ID + "-" + stage + " > [name=\"" + name + "\"]").html(lastToolsData[stage][name]);
                if (name === "result") {
                    if (resultTimeouts[stage]) {
                        clearTimeout(resultTimeouts[stage]);
                    }
                    resultTimeouts[stage] = setTimeout(function() {
                        delete lastToolsData[stage][name];
                        $("#" + TOOLS_CONTAINER_ID + "-" + stage + " > [name=\"" + name + "\"]").html("");
                    }, 3 * 1000);
                }
            }
        }


        /**
         * Login window sequence.
         */

        var loginWindow = null;
        function showLoginWindow() {
            if (
                loginWindow &&
                !!loginWindow.closed
            ) {
                loginWindow.focus();
                return loginWindow;
            }
            if (!window.initInnerFrame.identityLoginURL) {
                throw new Error("`window.initInnerFrame.identityLoginURL` not set!");
            }
            loginWindow = window.open(addQueryParameters(window.initInnerFrame.identityLoginURL, {
                "reinit": "false"
            }), "hcs_test_login_window", [
                "width=500",
                "height=500",
                "menubar=no",
                "toolbar=no",
                "personalbar=no",
                "location=yes",
                "resizable=yes",
                "scrollbars=yes",
                "status=yes"
            ].join(","));
            if (!loginWindow) {
                console.error("We were unable to open a login window!");
                alert("We were unable to open a login window!");
                throw new Error("We were unable to open a login window!");
            }
            var isClosedInterval = setInterval(function () {
                if (!loginWindow || loginWindow.closed) {
                    log('showLoginWindow() - window closed');
                    clearInterval(isClosedInterval);
                    loginWindow = null;
                }
            }, 500);
            loginWindow.focus();
            return loginWindow;
        }


        /**
         * App API - These methods get called by the application hosting this web view.
         */

        window.initInnerFrame = function (identityLoginURL) {

            log('window.initInnerFrame(identityLoginURL)', identityLoginURL);

            if (!identityLoginURL) {
                throw new Error("No `identityLoginURL` set!");
            }

            window.initInnerFrame.identityLoginURL = identityLoginURL;

            if (isIframeLoaded()) {
                log('window.initInnerFrame() - iframe already loaded. reload iframe.');
                reloadInnerFrame();
            } else {
                generateInnerFrame(identityLoginURL);
            }

            return true;
        }


        /**
         * Inner Frame API - These methods get called by the page loaded in the inner frame.
         */
        window.addEventListener("message", function (event) {
            try {
                if (!/^\{/.test(event.data)) return;

                var message = JSON.parse(event.data);
                log('window.addEventListener("message")', message);

                if (message.request) {
                    if (message.request.$handler === "identity") {

                        // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessWindowRequest
                        if (message.request.$method === "identity-access-window") {

                            function sendResult() {
                                return sendMessageToInnerFrame({
                                    "result": {
                                        "$domain": message.request.$domain,
                                        "$appid": message.request.$appid,
                                        "$id": message.request.$id,
                                        "$handler": "identity",
                                        "$method": "identity-access-window",
                                        "$timestamp": Date.now()/1000
                                    }
                                });
                            }

                            if (event.source === loginWindow) {
                                return sendResult();
                            } else {

                                var relogin = null;
                                if (
                                    lastToolsData &&
                                    lastToolsData.ready &&
                                    lastToolsData.ready.relogin &&
                                    (relogin = JSON.parse(lastToolsData.ready.relogin)) &&
                                    relogin.reloginKey
                                ) {
                                    showTools("ready");
                                } else {
                                    showTools("ready", null, {
                                        disable: [
                                            {
                                                stage: "ready",
                                                button: "identity-access-reset"
                                            }
                                        ]
                                    });
                                }

                                // See if we should open a login window and if we need to.
                                if (
                                    // Should we open?
                                    message.request.browser &&
                                    message.request.browser.visibility === true &&
                                    message.request.browser.top === true &&
                                    // Do we need to?
                                    (
                                        !window.parent ||
                                        window.parent !== window
                                    )
                                ) {
                                    log('identity-access-window', "The identity provider requested a new top window for the login sequence.");
                                    return showLoginWindow();
                                } else {

                                    if (message.request.browser.visibility) {
                                        showInnerFrame();
                                    } else {
                                        hideInnerFrame();
                                    }

                                    return sendResult();
                                }
                            }
                        }
                    }
                } else
                if (message.notify) {
                    if (message.notify.$handler === "identity") {
                        // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessCompleteNotification
                        if (message.notify.$method === "identity-access-complete") {

                            if (event.source === loginWindow) {
                                log('identity-access-complete', "Close login window.");
                                loginWindow.close();
                                loginWindow = null;
                                // If we had a window open we need to notify our iframe that identity access completed
                                // so we can then call methods on it.
                                sendMessageToInnerFrame({
                                    "notify": {
                                        "$domain": getIdentityDomain(),
                                        "$appid": "com.hookflash.OpenPeerSampleApp",
                                        "$handler": "identity",
                                        "$id": generateId(),
                                        "$method": "identity-access-complete"
                                    }
                                });
                            }

                            $("#" + INNER_FRAME_PLACEHOLDER_ID + " > DIV").addClass("short");

                            showTools("ready", {
                                relogin: JSON.stringify({
                                    reloginKey: message.notify.identity.reloginKey
                                }, null, 4)
                            }, {
                                enable: [
                                    {
                                        stage: "ready",
                                        button: "identity-access-reset"
                                    }
                                ]
                            });

                            showTools("loggedin", {
                                identity: JSON.stringify(message.notify.identity, null, 4)
                            }, {
                                disable: [
                                    {
                                        stage: "ready"
                                    }
                                ]
                            });

                            return;
                        }
                    }
                } else
                if (message.result) {
                    if (message.result.$handler === "identity") {
                        // @see http://docs.openpeer.org/OpenPeerProtocolSpecification/#IdentityServiceRequests-IdentityAccessLockboxUpdateRequest
                        if (message.result.$method === "identity-access-lockbox-update") {
                            var stage = (visibleStages.indexOf("loggedin") !== -1) ? "loggedin" : "init";
                            if (message.result.error) {
                                return showTools(stage, {
                                    result: JSON.stringify(message.result.error, null, 4)
                                });
                            } else {
                                return showTools(stage, {
                                    result: "{}"
                                });
                            }
                        } else
                        // @see http://docs.openpeer.org/OpenPeerProtocolSpecificationAnnexRolodex/#IdentityServiceRequestsAnnex-IdentityAccessRolodexCredentialsGetRequest
                        if (message.result.$method === "identity-access-rolodex-credentials-get") {
                            if (message.result.error) {
                                var stage = (visibleStages.indexOf("loggedin") !== -1) ? "loggedin" : "init";
                                return showTools(stage, {
                                    result: JSON.stringify(message.result.error, null, 4)
                                });
                            } else {
                                return showTools("rolodex-init", {
                                    "rolodex-token": JSON.stringify(message.result.rolodex, null, 4)
                                });
                            }
                        }
                    }
                }

            } catch (err) {
                log("ERROR", 'window.addEventListener("message")', err.stack);
                console.error("ERROR", 'window.addEventListener("message")', err.stack);
            }
        }, false);


        /**
         * Init
         */

        window.init = function () {
            log('init()');

            initConfig();

            initTools();

            if (/trigger=login/.test(window.location.search)) {
                window.initInnerFrame(getUrlFor("/login.html?reload=true"));
            }

            if (
                typeof parent === "object" &&
                typeof parent.postMessage === "function"
            ) {
                parent.postMessage("notify:HCS-STACK-INTEGRATION:LOADED", "*");
            }
        }


    })(window));
    </script>
</head>
<body onload="init();">
    <div id="config" class="hidden">
        <div><label>Identity Domain</label><input id="config-identity-domain" type="text" value=""/></div>
    </div>
    <div id="tools"></div>
    <div id="inner-frame" class="hidden">        
        <div></div>
    </div>
</body>
</html>